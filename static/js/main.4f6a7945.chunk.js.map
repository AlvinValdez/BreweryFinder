{"version":3,"sources":["components/Brewery.js","components/BreweryList.js","components/BrewerySearch.js","App.js","serviceWorker.js","index.js"],"names":["Brewery","react_default","a","createElement","Fragment","className","this","props","item","name","brewery_type","street","city","state","target","rel","href","website_url","Component","BreweryList","backToSearch","brewery","undefined","map","Brewery_Brewery","key","id","_this","react_typed_default","strings","typeSpeed","startDelay","backDelay","backSpeed","loop","loopCount","showCursor","type","onClick","displayResult","BrewerySearch","search","event","setState","value","handleSearch","_this2","placeholder","onChange","updateSearch","bind","onSearchClick","App","items","isLoaded","url","pageIndex","whatToDisplay","page","BreweryList_BreweryList","BrewerySearch_BrewerySearch","Object","assertThisInitialized","fetch","data","json","jsonData","cleanData","filterResults","console","log","_context","t0","filter","toLowerCase","includes","searchTerm","concat","fetchBreweryData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f6a7945.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Brewery extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"col-10 mx-auto col-md-6 col-lg-4 my-3\">\r\n          <div className=\"card h-100\">\r\n            <div className=\"card-body flex-column h-100\">\r\n              <h5 className=\"Kreon-Text text-capitalize\">\r\n                {this.props.item.name}\r\n              </h5>\r\n              <h6 className=\"text-capitalize\">\r\n                <strong>Type: </strong>\r\n                {this.props.item.brewery_type}\r\n              </h6>\r\n              <h6 className=\"text-capitalize\">{this.props.item.street}</h6>\r\n              <h6 className=\"text-capitalize\">\r\n                {this.props.item.city}, {this.props.item.state}\r\n              </h6>\r\n\r\n              <a\r\n                className=\"btn btn-primary\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                href={this.props.item.website_url}\r\n              >\r\n                Check Them Out\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Brewery from \"./Brewery\";\r\nimport Typed from \"react-typed\";\r\n\r\nexport default class BreweryList extends Component {\r\n  onClick() {\r\n    this.props.backToSearch();\r\n  }\r\n\r\n  displayResult(brewery) {\r\n    if (brewery[0] === undefined) {\r\n      return (\r\n        <h1 className=\"Kreon-Text text-center\">\r\n          We couldn't find anything in that location...\r\n        </h1>\r\n      );\r\n    } else {\r\n      return brewery.map(item => {\r\n        return <Brewery key={item.id} item={item} />;\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { brewery } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"pt-5\">\r\n          <nav className=\"navbar fixed-top navbar-dark bg-dark py-2 mb-5\">\r\n            <Typed\r\n              strings={[\"Time to drink\", \"Time to party\", \"Time to relax\"]}\r\n              typeSpeed={70}\r\n              startDelay={1200}\r\n              backDelay={3000}\r\n              backSpeed={60}\r\n              loop={true}\r\n              loopCount={30}\r\n              showCursor={true}\r\n              className={\"h4 mx-auto Quicksand-Text\"}\r\n            />\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-info\"\r\n                onClick={() => this.onClick()}\r\n              >\r\n                Back to Search\r\n              </button>\r\n            </form>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"container my-5\">\r\n          <div className=\"row\">{this.displayResult(brewery)}</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Typed from \"react-typed\";\r\n\r\nexport default class BrewerySearch extends Component {\r\n  state = {\r\n    search: \"Boston\"\r\n  };\r\n\r\n  updateSearch(event) {\r\n    this.setState({ search: event.target.value });\r\n  }\r\n\r\n  onSearchClick() {\r\n    this.props.handleSearch(this.state.search);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"jumbotron text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h1 className=\"Quicksand-Text Glow\">Brewery Finder</h1>\r\n              <Typed\r\n                strings={[\r\n                  \"Find a brewery in your hometown\",\r\n                  \"Find your new hangout\",\r\n                  \"Find your new favorite beer\",\r\n                  \"Find the answer to lifes mysteries\"\r\n                ]}\r\n                typeSpeed={70}\r\n                startDelay={1200}\r\n                backDelay={3000}\r\n                backSpeed={60}\r\n                loop={true}\r\n                loopCount={30}\r\n                showCursor={true}\r\n                className={\"h4\"}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container mb-5\">\r\n          <div className=\"row\">\r\n            <div className=\"col-10 mx-auto col-md-8 mt-5 text-center\">\r\n              <h2 className=\"text-capitalize\">\r\n                search for breweries in your town\r\n              </h2>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  placeholder=\"Enter city name...\"\r\n                  onChange={this.updateSearch.bind(this)}\r\n                />\r\n                <button\r\n                  className=\"btn btn-primary mx-2\"\r\n                  onClick={() => this.onSearchClick()}\r\n                >\r\n                  Search\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <footer className=\"mx-auto py-3\">\r\n          <div className=\"container text-center\">\r\n            Powered By{\" \"}\r\n            <span className=\"text-muted\">\r\n              <a\r\n                href=\"https://www.openbrewerydb.org/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Open Brewery DB\r\n              </a>\r\n            </span>\r\n          </div>\r\n        </footer>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport BreweryList from \"./components/BreweryList\";\r\nimport BrewerySearch from \"./components/BrewerySearch\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    items: [],\r\n    isLoaded: false,\r\n    url: \"https://api.openbrewerydb.org/breweries\",\r\n    pageIndex: 0\r\n  };\r\n\r\n  async fetchBreweryData() {\r\n    try {\r\n      const data = await fetch(this.state.url);\r\n      const jsonData = await data.json();\r\n      const cleanData = this.filterResults(jsonData);\r\n      this.setState({\r\n        isLoaded: true,\r\n        items: cleanData\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  filterResults(data) {\r\n    // Exclude items that contains \"Brewery In Planning\"\r\n    return data.filter(item => !(item.name.toLowerCase()).includes(\"Brewery In Planning\".toLowerCase()));\r\n  }\r\n\r\n  handleSearch(searchTerm) {\r\n    this.setState({\r\n      url: `https://api.openbrewerydb.org/breweries?by_city=${searchTerm}`,\r\n      pageIndex: 1\r\n    });\r\n    console.log(\"App \" + searchTerm);\r\n    console.log(\"App state: \" + this.state.url);\r\n  }\r\n\r\n  backToSearch() {\r\n    this.setState({\r\n      pageIndex: 0\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.fetchBreweryData();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchBreweryData();\r\n  }\r\n\r\n  whatToDisplay = page => {\r\n    if (page === 1) {\r\n      return (\r\n        <BreweryList\r\n          brewery={this.state.items}\r\n          backToSearch={() => this.backToSearch()}\r\n        />\r\n      );\r\n    } else if (page === 0) {\r\n      return <BrewerySearch handleSearch={this.handleSearch.bind(this)} />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    var { isLoaded } = this.state;\r\n    if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          {this.whatToDisplay(this.state.pageIndex)}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}