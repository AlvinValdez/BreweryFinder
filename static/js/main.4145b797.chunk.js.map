{"version":3,"sources":["components/Brewery.js","components/BreweryList.js","components/BrewerySearch.js","App.js","serviceWorker.js","index.js"],"names":["Brewery","displayWebsiteUrl","_this","props","item","website_url","react_default","a","createElement","className","target","rel","href","console","log","this","Fragment","name","brewery_type","street","city","state","Component","BreweryList","backToSearch","brewery","undefined","map","Brewery_Brewery","key","id","react_typed_default","strings","typeSpeed","startDelay","backDelay","backSpeed","loop","loopCount","showCursor","type","onClick","displayResult","BrewerySearch","search","event","setState","value","handleSearch","_this2","placeholder","onChange","updateSearch","bind","onSearchClick","App","items","isLoaded","url","pageIndex","whatToDisplay","page","BreweryList_BreweryList","BrewerySearch_BrewerySearch","Object","assertThisInitialized","fetch","data","json","jsonData","cleanData","filterResults","_context","t0","filter","toLowerCase","includes","searchTerm","concat","fetchBreweryData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4145b797.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Brewery extends Component {\n\n  displayWebsiteUrl = () => {\n    if(this.props.item.website_url === \"\") {\n      return;\n    } else {\n      return(\n        <a\n          className=\"btn btn-primary\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={this.props.item.website_url}\n        >\n          Check Them Out\n        </a>\n      )\n    }\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      \n      <React.Fragment>\n        <div className=\"col-10 mx-auto col-md-6 col-lg-4 my-3\">\n          <div className=\"card h-100\">\n            <div className=\"card-body flex-column h-100\">\n              <h5 className=\"Kreon-Text text-capitalize\">\n                {this.props.item.name}\n              </h5>\n              <h6 className=\"text-capitalize\">\n                <strong>Type: </strong>\n                {this.props.item.brewery_type}\n              </h6>\n              <h6 className=\"text-capitalize\">{this.props.item.street}</h6>\n              <h6 className=\"text-capitalize\">\n                {this.props.item.city}, {this.props.item.state}\n              </h6>\n              {this.displayWebsiteUrl()}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Brewery from \"./Brewery\";\nimport Typed from \"react-typed\";\n\nexport default class BreweryList extends Component {\n  onClick() {\n    this.props.backToSearch();\n  }\n\n  displayResult(brewery) {\n    if (brewery[0] === undefined) {\n      return (\n        <h1 className=\"Kreon-Text text-center\">\n          We couldn't find anything in that location...\n        </h1>\n      );\n    } else {\n      return brewery.map(item => {\n        return <Brewery key={item.id} item={item} />;\n      });\n    }\n  }\n\n  render() {\n    const { brewery } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"pt-5\">\n          <nav className=\"navbar fixed-top navbar-dark bg-dark py-2 mb-5\">\n            <Typed\n              strings={[\"Time to drink\", \"Time to party\", \"Time to relax\"]}\n              typeSpeed={70}\n              startDelay={1200}\n              backDelay={3000}\n              backSpeed={60}\n              loop={true}\n              loopCount={30}\n              showCursor={true}\n              className={\"h4 mx-auto Quicksand-Text\"}\n            />\n            <form className=\"form-inline my-2 my-lg-0\">\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-info\"\n                onClick={() => this.onClick()}\n              >\n                Back to Search\n              </button>\n            </form>\n          </nav>\n        </div>\n\n        <div className=\"container my-5\">\n          <div className=\"row\">{this.displayResult(brewery)}</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Typed from \"react-typed\";\n\nexport default class BrewerySearch extends Component {\n  state = {\n    search: \"Boston\"\n  };\n\n  updateSearch(event) {\n    this.setState({ search: event.target.value });\n  }\n\n  onSearchClick() {\n    this.props.handleSearch(this.state.search);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"jumbotron text-center\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <h1 className=\"Quicksand-Text Glow\">Brewery Finder</h1>\n              <Typed\n                strings={[\n                  \"Find a brewery in your hometown\",\n                  \"Find your new hangout\",\n                  \"Find your new favorite beer\",\n                  \"Find the answer to lifes mysteries\"\n                ]}\n                typeSpeed={70}\n                startDelay={1200}\n                backDelay={3000}\n                backSpeed={60}\n                loop={true}\n                loopCount={30}\n                showCursor={true}\n                className={\"h4\"}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"container mb-5\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-8 mt-5 text-center\">\n              <h2 className=\"text-capitalize\">\n                search for breweries in your town\n              </h2>\n              <div className=\"input-group\">\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Enter city name...\"\n                  onChange={this.updateSearch.bind(this)}\n                />\n                <button\n                  className=\"btn btn-primary mx-2\"\n                  onClick={() => this.onSearchClick()}\n                >\n                  Search\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <footer className=\"mx-auto py-3\">\n          <div className=\"container text-center\">\n            Powered By{\" \"}\n            <span className=\"text-muted\">\n              <a\n                href=\"https://www.openbrewerydb.org/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Open Brewery DB\n              </a>\n            </span>\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport BreweryList from \"./components/BreweryList\";\nimport BrewerySearch from \"./components/BrewerySearch\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    isLoaded: false,\n    url: \"https://api.openbrewerydb.org/breweries\",\n    pageIndex: 0\n  };\n\n  async fetchBreweryData() {\n    try {\n      const data = await fetch(this.state.url);\n      const jsonData = await data.json();\n      const cleanData = this.filterResults(jsonData);\n      this.setState({\n        isLoaded: true,\n        items: cleanData\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  filterResults(data) {\n    // Exclude items that contains \"Brewery In Planning\"\n    return data.filter(item => !(item.name.toLowerCase()).includes(\"Brewery In Planning\".toLowerCase()));\n  }\n\n  handleSearch(searchTerm) {\n    this.setState({\n      url: `https://api.openbrewerydb.org/breweries?by_city=${searchTerm}`,\n      pageIndex: 1\n    });\n    console.log(\"App \" + searchTerm);\n    console.log(\"App state: \" + this.state.url);\n  }\n\n  backToSearch() {\n    this.setState({\n      pageIndex: 0\n    });\n  }\n\n  componentDidUpdate() {\n    // this.fetchBreweryData();\n  }\n\n  componentDidMount() {\n    this.fetchBreweryData();\n  }\n\n  whatToDisplay = page => {\n    if (page === 1) {\n      return (\n        <BreweryList\n          brewery={this.state.items}\n          backToSearch={() => this.backToSearch()}\n        />\n      );\n    } else if (page === 0) {\n      return <BrewerySearch handleSearch={this.handleSearch.bind(this)} />;\n    }\n  };\n\n  render() {\n    var { isLoaded } = this.state;\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <React.Fragment>\n          {this.whatToDisplay(this.state.pageIndex)}\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}